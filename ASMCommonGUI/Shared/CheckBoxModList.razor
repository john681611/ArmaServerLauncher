@using Lib
<div style=@Style class="checkboxList">
    @if (Server != null)
    {
        var lastfistChar = "";
        foreach (var item in Server.Mods.OrderBy(x => x.Value.Name))
        {
            var key = item.Key;
            var value = item.Value;
            bool Checked = false;
            if (SelectedValues.Contains(key))
            {
                Checked = true;
            }
            @if (lastfistChar != value.Name[0].ToString())
            {
                lastfistChar = value.Name[0].ToString();
                <div class="checkboxList-break"></div>
                <div class="checkboxList-group">@lastfistChar: </div>
            }
            <label class="checkboxList-item @((value.ServerSide? "serverSide" : ""))">
                <input type="checkbox" checked=@Checked @onchange="eventArgs => { CheckboxClicked(key, eventArgs.Value); }"  />
                <span>
                    @value.Name
                    <span class="description">
                        <button @onclick="eventArgs => { CheckboxContext(key); }">Toggle Server Side</button>
                        (@key) @value.Path</span>
                </span>
            </label>
        }
    }
    @ChildContent
</div>

@code {
    [Parameter] public ASMConfig Config { get; set; }
    [Parameter] public Server Server { get; set; }
    [Parameter] public string Style { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public List<string> SelectedValues { get; set; }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }

    public void CheckboxContext(string aSelectedId) {
        var mod  = Server.Mods[aSelectedId];
        mod.ServerSide = !mod.ServerSide;
        Server.SaveServerSideMods(Config);
        StateHasChanged();
    }
}