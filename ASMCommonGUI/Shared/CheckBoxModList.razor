@using Lib
<div style=@Style class="checkboxList">
    @if (Data != null)
    {
        var lastfistChar = "";
        foreach (var item in Data.OrderBy(x => x.Value.Name))
        {
            var key = item.Key;
            var value = item.Value;
            bool Checked = false;
            if (SelectedValues.Contains(key))
            {
                Checked = true;
            }
            @if(lastfistChar !=  value.Name[0].ToString())
            {
                lastfistChar = value.Name[0].ToString();
                <div class="checkboxList-break"></div>
                <div class="checkboxList-group">@lastfistChar: </div>
            }
            <label class="checkboxList-item @((value.ServerSide? "serverSide" : ""))">
                <input type="checkbox" checked=@Checked
            @onchange="eventArgs => { CheckboxClicked(key, eventArgs.Value); }" />
                <span>
                    @value.Name
                    <span class="description">@value.Path</span>
                </span>
            </label>
        }
    }
    @ChildContent
</div>

@code {
    //Data for the Checkbox
    [Parameter] public Dictionary<string, Mod> Data { get; set; }
    // The field to be shown adjacent to checkbox
    // CSS Style for the Checkbox container
    [Parameter] public string Style { get; set; }
    // Any childd content for the control (if needed)
    [Parameter] public RenderFragment ChildContent { get; set; }
    // The array which contains the list of selected checkboxs
    [Parameter] public List<string> SelectedValues { get; set; }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}