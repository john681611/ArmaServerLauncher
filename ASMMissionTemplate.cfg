// SERVER SETTINGS
hostname = "ASM Server"; // The name of the server that will be displayed in the public server list
password = ""; // Password for joining
passwordAdmin = ""; // Password to become server admin. When you're in Arma MP and connected to the server, type '#login xyz'
serverCommandPassword = "";
statisticsEnabled = 0; // Set to 0 to opt out of analytics
lobbyIdleTimeout = 9000;
enablePlayerDiag = 0; //Logs players' bandwidth and desync info every 60 seconds, as well as "network message is pending" owner identity. 

//Admin UIDs. Allow listed users to log in as admin by simply typing #login without a password. 
admins[]={};

// DO NOT CHANGE THESE
maxPlayers = 40; // Maximum amount of players. Civilians and watchers, beholder, bystanders and so on also count as player
logFile = "server_console.log";


// MOTD SETTINGS
motd[] = {
};

motdInterval = 5; // Time interval (in seconds) between each message


// IN GAME SETTINGS
BattlEye = 1;                           // Server to use BattlEye system
disableVoN = 1;                       // If set to 1, Voice over Net will not be available
vonCodec = 1;
vonCodecQuality = 30;             // 8kHz is 0-10, 16kHz is 11-20, 32kHz is 21-30
persistent = 0;                       // If 1, missions still run on even after the last player disconnected.
timeStampFormat = "short";           // Set the timestamp format used on each report line in server-side RPT file. Possible values are "none" (default),"short","full".


// NETWORK SETTINGS
disconnectTimeout = 20;
//maxPing = 500;
maxDesync = 95;
maxPacketLoss = 95;
kickClientsOnSlowNetwork[] = {0, 0, 0, 0};
steamProtocolMaxDataSize = 2048;


// VOTING SETTINGS
voteMissionPlayers = 1;   // Tells the server how many people must connect so that it displays the mission selection screen
voteThreshold = 1;				// Player % need to vote for something, for example an admin or a new map, to become effective
//allowedVoteCmds[] = {};
//allowedVotedAdminCmds[] = {};


// SECURITY SETTINGS
kickTimeout[] = { {0, -1},{1, 10},{2, 10},{3, 10} }; // 0 - manual kick, 1 - connectivity kick, 2 - BattlEye kick, 3 - harmless kick. Timeout in seconds or -1 until missionEnd or -2 until serverRestart
kickDuplicate = 1;				// Each ArmA version has its own ID. If kickDuplicate is set to 1, a player will be kicked when he joins a server where another player with the same ID is playing
requiredSecureId = 2;       // When requiredSecureId=2 is used, all players are requested to provide a validated ID and any player who does not provide it will not be allowed to connect on the server
verifySignatures = 2;       // Verifies .pbos against .bisign files. Valid values 0 (disabled), 1 (prefer v2 sigs but accept v1 too) and 2 (only v2 sigs are allowed)
allowedFilePatching = 1;
allowedLoadFileExtensions[] = {"hpp","sqs","sqf","fsm","cpp","paa","txt","xml","inc","ext","sqm","ods","fxy","lip","csv","kb","bik","bikb","html","htm","biedi"}; // Only allow files with these extensions to be loaded via loadFile command
allowedPreprocessFileExtensions[] = {"hpp","sqs","sqf","fsm","cpp","paa","txt","xml","inc","ext","sqm","ods","fxy","lip","csv","kb","bik","bikb","html","htm","biedi"}; // Only allow files with these extensions to be loaded via preprocessFile/preprocessFileLineNumber commands


// SCRIPTING SETTINGS
onUserConnected = "";
onUserDisconnected = "";
doubleIdDetected = "";

//headlessClient Settings
localClient[]={"127.0.0.1","212.38.189.153"};
headlessClients[]={"127.0.0.1","212.38.189.153"};
battleyeLicense=1;


// SIGNATURE VERIFICATION SETTINGS
onUnsignedData = "";     // Unsigned data detected
onHackedData = "";         // Tampering of the signature detected
onDifferentData = "";   // Data with a valid signature, but different version than the one present on server detected


// MISSION SETTINGS
autoSelectMission = true;
class Missions {
    class ARMA3 {
    template = "$TEMPLATE$";
        difficulty = "Custom"; // Server difficulty Settings (Recruit, Regular, Veteran, Custom)
    };
};

//forcedDifficulty = ""; // Will be overridden if set in Mission cycle
missionWhitelist[] = {};

class AdvancedOptions
{
    LogObjectNotFound = false; // (default true, logging enabled)
    SkipDescriptionParsing = false; // (default false, parse description.ext)
    ignoreMissionLoadErrors = false;
};